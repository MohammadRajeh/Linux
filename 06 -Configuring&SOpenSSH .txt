Configuring and Securing Open SSH Service 
================================================================

# systemctl status sshd
# rpm -qa | grep -i ssh
OR
# yum search sshd 
# ssh-keygen                          (Default is RSA)
# ssh-keygen -t dsa 
# ssh-kegen -t rsa 
# ls -al
# cd .ssh/
ssh 192.168.1.10
ssh m.rajeh@192.168.1.1
ssh m.rajeh@192.168.1.10 hostname 
exit
w
who

Note:
    - The first time a user uses ssh to connect to a particular server
    - The ssh command  stores the server's public key in the user's ~/.ssh/known_hosts file. 
    - Every time the user connects after that.
    - The client makes sure it gets the same public key from the server by comparing the server's entry in the ~/.ssh/known_hosts file to the public key the server sent.
    - If the keys do not match, the client assums that the network traffic is being hijacked or that the server has been compromised, and breaks the connection.
    - Host keys are stored in /etc/ssh/ssh_host_key * on the SSH server.

    hostnamectl set-hostname server.redhat.com
    ==================================================================================
    SSH key-bassed authentication:
    # ssh-copy-id 192.168.1.1
    # ssh-copy-id m.rajeh@192.168.1.1
    # ssh-copy-id -p 2020 m.rajeh@192.168.1.1
    # ssh-copy-id -i ~/ssh/id_rsa.pub m.rajeh@192.168.1.1

    - In the event the private key is stolen, it is very difficult for someone other than the issuer to use it when producted with a passphrase.
    - When the key is copied to another system using ssh-copy-id, it copies the ~/.ssh/id_rsa.pub file by default.

    # ls /home/m.rajeh/.ssh
    authorized_keys
    # ps aux | grep -i ssh
    # kill 8619
    ========================================================================================
    Customizing SSH service Configuration:
    # vim /etc/ssh/sshd_config
    #port 22                                                       (Changes the default port)
    # PermitRootLogin yes                                          (Prohibit the root user from logging in using SSH)
    # PasswordAuthentication yes                                   (Prohibit password authentication using SSH)
    # ssh m.rajeh@192.168.1.1 -p 2200

SSH command line options

Some of the most important command-line options for the OpenSSH client are:

        -1 Use protocol version 1 only.

        -2 Use protocol version 2 only.

        -4 Use IPv4 addresses only.

        -6 Use IPv6 addresses only.

        -A Enable forwarding of the authentication agent connection.

        -a Disable forwarding of the authentication agent connection.

        -C Use data compression

        -c cipher_spec Selects the cipher specification for encrypting the session.

        -D [bind_address:]port Dynamic application-level port forwarding. This allocates a socket to listen to port on the local side. When a connection is made to this port, the connection is forwarded over the secure channel, and the application protocol is then used to determine where to connect to from the remote machine.

        -E log_file Append debug logs to log_file instead of standard error.

        -F configfile Specifies a per-user configuration file. The default for the per-user configuration file is ~/.ssh/config.

        -g Allows remote hosts to connect to local forwarded ports. 
=================================================================================================
    copy a file from the remote host, use:
    scp [-r] file ... [user@]host:[path]
    # scp test_file 192.168.1.1:~
    #scp -P 2200 test_file 192.168.1.1:~
    # scp 192.168.1.1:/home/test_file /home/m.rajeh

    # scp host:file path

    To cpoy entire directory trees instead of single files, add the -r option. For example:
    # scp -r host:path/directory .
  
   ##Transfer files remotely with sftp:
    sftp 192.168.1.1
    sftp> lssftp> mkdir client_dir
    sftp> get file2
    sftp> get -r /var/log                           (download recurively)
    sftp> put test_file
    sftp> exit

=============================================== =================   =============== === ==================  ================
Syncronizing Files Between Systems Securely:
    # rsync test_file 192.168.1.1:~
    # rsync 192.168.1.1:/home/test_file /home/m.rajeh
    # rsync root@192.168.1.1:/home/test_file  ~
    # rsync -rvz file2 root@192.168.1.1:/root/
192.168.1.47
    * -r , --recursive
    * -v, --verbose
    * -z, --compress    (during Transfer)


    apt install ssh